#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define STACK_SIZE 10

void Insert(int index, int addData);

int* stack;
int top = -1;               // top 초기화
int size = 1;
unsigned int cnt = 0;

int isEmpty() {
    if (top == -1) return 1;
    else return 0;
}

int isFull() {
    if (top % STACK_SIZE == 9) return 1;
    else return 0;
}


// 스택의 top에 원소를 삽입하는 연산
void push(int item) {
    int* temp;

    if (isFull()) {
        printf(" Full STACK\n");
        temp = (int*)malloc((STACK_SIZE * size) * sizeof(int));

        for (int i = 0; i < (top + 1); i++) temp[i] = stack[i];
        stack = (int*)malloc((STACK_SIZE * (size + 1)) * sizeof(int));

        for (int i = 0; i < (top + 1); i++) stack[i] = temp[i];
        stack[++top] = item;  // top을 증가시킨 후 현재 top에 원소 삽입

        size++;

        free(temp);

    }
    else stack[++top] = item;  // top을 증가시킨 후 현재 top에 원소 삽입
}

// 스택의 원소를 출력하는 연산
void printStack() {
    int i;
    printf(" STACK SIZE [%d]\n", (STACK_SIZE * size));
    printf("\n STACK [ ");
    for (i = 0; i <= top; i++) printf("%d ", stack[i]);
    printf("]\n");
}

int main(void) {
    int i;
    stack = (int*)malloc(STACK_SIZE * sizeof(int));
    for (i = 0; i < 44; i++) push(i + 1);
    printStack();
    Insert(2, 0);
    for (i = 0; i < 7; i++)  printf(" POP Data [%d]\n", Pop());
    printStack();


    free(stack);
    getchar();

    return 0;
}

int Pop(int index)
{
    int res = 0;

    if ((index >= 0) && (index < top))
    {
        res = stack[index];

        printf("index = [%d] size=%d\n", index, size);
        if (isEmpty())
        {
            printf("\n Empty STACK");
            return 0;
        }
        else
        {
            for (int i = 0; (i + index) < top; i++)
                stack[index + i] = stack[index + i + 1];
            top--;            
        }
    }
    else
    {
        res = stack[top];
        top--;
    }

    return res;
}

void Insert(int index, int addData)
{
    int* temp;

    if (isFull()) {
        printf(" Full STACK\n");
        temp = (int*)malloc((STACK_SIZE * size) * sizeof(int));

        for (int i = 0; i < (top + 1); i++) temp[i] = stack[i];
        stack = (int*)malloc((STACK_SIZE * (size + 1)) * sizeof(int));

        for (int i = 0; i < (top + 1); i++) stack[i] = temp[i];

        size++;
    }

    top++;

    for (int i = top; i > index; i--)
        stack[i] = stack[i-1];

    stack[index] = addData;
}
