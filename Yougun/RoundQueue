#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#define Q_SIZE 10

/*
int isEmpty();
int isFull();
int queueSize();
void enqueue(int item);
int dequeue();
void printQueue();
*/

int QUEUE_SIZE = 10;
int OLD_QSIZE = 0;
int* queue;
int front;      // 전단
int rear;       // 후단
int size = 1;

int isEmpty() {
    if (front == rear) return 1;
    else return 0;
}

// 큐가 포화 상태인지 확인하는 연산
int isFull() {
    if (front == (rear + 1) % QUEUE_SIZE) return 1;
    else return 0;
}

int queueSize() {
    return(rear - front + QUEUE_SIZE) % QUEUE_SIZE;
}

// 스택의 top에 원소를 삽입하는 연산
void enqueue(int item) {
    int* temp;

    if (isFull())
    {
        int i, j, maxi = rear;
        //printQueue();
        //printf("Full QUEUE[%d] item=[%d]\n", QUEUE_SIZE, item);

        // queue --> temp에 저장
        temp = queue;
        //printf("queue = [%p]\n", queue);
        //printf("temp = [%p]\n", temp);

        // 예전 QUEUE_SIZE 저장 
        OLD_QSIZE = QUEUE_SIZE;

        // 새로 다시 queue 할당
        QUEUE_SIZE = Q_SIZE * (++size);
        queue = (int*)realloc(queue, QUEUE_SIZE * sizeof(int));
        //printf("queue = [%p]\n", queue);
        if (front > rear) maxi += OLD_QSIZE;

        // 예전 순서의 temp 데이터를 새로운 queue에 queue[1]부터 순서대로 저장 
        for (i = front + 1, j = 1; i <= maxi; i++, j++)
            queue[j] = temp[i % OLD_QSIZE];

        // front = 0, rear = OLD_QSIZE - 1 ==> 초기화
        front = 0;
        rear = OLD_QSIZE - 1;


        rear = (rear + 1) % QUEUE_SIZE;
        queue[rear] = item;
    }
    else
    {
        rear = (rear + 1) % QUEUE_SIZE;
        queue[rear] = item;
    }

}

int dequeue() {
    if (isEmpty()) {   // 큐가 공백 상태인 경우
        printf("\n\n Queue is Empty!!\n");
        return 0;
    }
    else
    {
        front = (front + 1) % QUEUE_SIZE;
        return queue[front];
    }
    return 0;
}

// 큐의 원소를 출력하는 연산
void printQueue() {
    int i, maxi = rear;
    if (front > rear) maxi += QUEUE_SIZE;
    printf("Queue size is [%2d]= ", queueSize());
    for (i = front + 1; i <= maxi; i++)
        printf("%2d ", queue[i % QUEUE_SIZE]);
    printf("\n");
}

void main(void) {
    int i;
    queue = (int*)malloc(QUEUE_SIZE * sizeof(int));

    for (i = 0; i < 9; i++) enqueue(i + 1);
    printQueue();
    for (i = 0; i < 7 ; i++) dequeue();
    printQueue();
    for (i = 10; i < 19; i++) enqueue(i + 1);
    printQueue();

    free(queue);
    getchar();
}
